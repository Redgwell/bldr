// Code generated by counterfeiter. DO NOT EDIT.
package libfakes

import (
	"sync"

	"github.com/rdrdog/bldr/pkg/lib"
)

type FakeDocker struct {
	BuildStub        func(string, string, string, string, []string)
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 []string
	}
	IsImageAvailableStub        func(string, string, bool) bool
	isImageAvailableMutex       sync.RWMutex
	isImageAvailableArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 bool
	}
	isImageAvailableReturns struct {
		result1 bool
	}
	isImageAvailableReturnsOnCall map[int]struct {
		result1 bool
	}
	PrintDockerBuildStub        func(string, string, string, []string) string
	printDockerBuildMutex       sync.RWMutex
	printDockerBuildArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 []string
	}
	printDockerBuildReturns struct {
		result1 string
	}
	printDockerBuildReturnsOnCall map[int]struct {
		result1 string
	}
	PullLatestStub        func(string)
	pullLatestMutex       sync.RWMutex
	pullLatestArgsForCall []struct {
		arg1 string
	}
	PushStub        func(string, string)
	pushMutex       sync.RWMutex
	pushArgsForCall []struct {
		arg1 string
		arg2 string
	}
	RunImageStub        func(string, map[string]string, map[string]string) error
	runImageMutex       sync.RWMutex
	runImageArgsForCall []struct {
		arg1 string
		arg2 map[string]string
		arg3 map[string]string
	}
	runImageReturns struct {
		result1 error
	}
	runImageReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDocker) Build(arg1 string, arg2 string, arg3 string, arg4 string, arg5 []string) {
	var arg5Copy []string
	if arg5 != nil {
		arg5Copy = make([]string, len(arg5))
		copy(arg5Copy, arg5)
	}
	fake.buildMutex.Lock()
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 []string
	}{arg1, arg2, arg3, arg4, arg5Copy})
	stub := fake.BuildStub
	fake.recordInvocation("Build", []interface{}{arg1, arg2, arg3, arg4, arg5Copy})
	fake.buildMutex.Unlock()
	if stub != nil {
		fake.BuildStub(arg1, arg2, arg3, arg4, arg5)
	}
}

func (fake *FakeDocker) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *FakeDocker) BuildCalls(stub func(string, string, string, string, []string)) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = stub
}

func (fake *FakeDocker) BuildArgsForCall(i int) (string, string, string, string, []string) {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	argsForCall := fake.buildArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeDocker) IsImageAvailable(arg1 string, arg2 string, arg3 bool) bool {
	fake.isImageAvailableMutex.Lock()
	ret, specificReturn := fake.isImageAvailableReturnsOnCall[len(fake.isImageAvailableArgsForCall)]
	fake.isImageAvailableArgsForCall = append(fake.isImageAvailableArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.IsImageAvailableStub
	fakeReturns := fake.isImageAvailableReturns
	fake.recordInvocation("IsImageAvailable", []interface{}{arg1, arg2, arg3})
	fake.isImageAvailableMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDocker) IsImageAvailableCallCount() int {
	fake.isImageAvailableMutex.RLock()
	defer fake.isImageAvailableMutex.RUnlock()
	return len(fake.isImageAvailableArgsForCall)
}

func (fake *FakeDocker) IsImageAvailableCalls(stub func(string, string, bool) bool) {
	fake.isImageAvailableMutex.Lock()
	defer fake.isImageAvailableMutex.Unlock()
	fake.IsImageAvailableStub = stub
}

func (fake *FakeDocker) IsImageAvailableArgsForCall(i int) (string, string, bool) {
	fake.isImageAvailableMutex.RLock()
	defer fake.isImageAvailableMutex.RUnlock()
	argsForCall := fake.isImageAvailableArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDocker) IsImageAvailableReturns(result1 bool) {
	fake.isImageAvailableMutex.Lock()
	defer fake.isImageAvailableMutex.Unlock()
	fake.IsImageAvailableStub = nil
	fake.isImageAvailableReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeDocker) IsImageAvailableReturnsOnCall(i int, result1 bool) {
	fake.isImageAvailableMutex.Lock()
	defer fake.isImageAvailableMutex.Unlock()
	fake.IsImageAvailableStub = nil
	if fake.isImageAvailableReturnsOnCall == nil {
		fake.isImageAvailableReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isImageAvailableReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeDocker) PrintDockerBuild(arg1 string, arg2 string, arg3 string, arg4 []string) string {
	var arg4Copy []string
	if arg4 != nil {
		arg4Copy = make([]string, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.printDockerBuildMutex.Lock()
	ret, specificReturn := fake.printDockerBuildReturnsOnCall[len(fake.printDockerBuildArgsForCall)]
	fake.printDockerBuildArgsForCall = append(fake.printDockerBuildArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 []string
	}{arg1, arg2, arg3, arg4Copy})
	stub := fake.PrintDockerBuildStub
	fakeReturns := fake.printDockerBuildReturns
	fake.recordInvocation("PrintDockerBuild", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.printDockerBuildMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDocker) PrintDockerBuildCallCount() int {
	fake.printDockerBuildMutex.RLock()
	defer fake.printDockerBuildMutex.RUnlock()
	return len(fake.printDockerBuildArgsForCall)
}

func (fake *FakeDocker) PrintDockerBuildCalls(stub func(string, string, string, []string) string) {
	fake.printDockerBuildMutex.Lock()
	defer fake.printDockerBuildMutex.Unlock()
	fake.PrintDockerBuildStub = stub
}

func (fake *FakeDocker) PrintDockerBuildArgsForCall(i int) (string, string, string, []string) {
	fake.printDockerBuildMutex.RLock()
	defer fake.printDockerBuildMutex.RUnlock()
	argsForCall := fake.printDockerBuildArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeDocker) PrintDockerBuildReturns(result1 string) {
	fake.printDockerBuildMutex.Lock()
	defer fake.printDockerBuildMutex.Unlock()
	fake.PrintDockerBuildStub = nil
	fake.printDockerBuildReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeDocker) PrintDockerBuildReturnsOnCall(i int, result1 string) {
	fake.printDockerBuildMutex.Lock()
	defer fake.printDockerBuildMutex.Unlock()
	fake.PrintDockerBuildStub = nil
	if fake.printDockerBuildReturnsOnCall == nil {
		fake.printDockerBuildReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.printDockerBuildReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeDocker) PullLatest(arg1 string) {
	fake.pullLatestMutex.Lock()
	fake.pullLatestArgsForCall = append(fake.pullLatestArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.PullLatestStub
	fake.recordInvocation("PullLatest", []interface{}{arg1})
	fake.pullLatestMutex.Unlock()
	if stub != nil {
		fake.PullLatestStub(arg1)
	}
}

func (fake *FakeDocker) PullLatestCallCount() int {
	fake.pullLatestMutex.RLock()
	defer fake.pullLatestMutex.RUnlock()
	return len(fake.pullLatestArgsForCall)
}

func (fake *FakeDocker) PullLatestCalls(stub func(string)) {
	fake.pullLatestMutex.Lock()
	defer fake.pullLatestMutex.Unlock()
	fake.PullLatestStub = stub
}

func (fake *FakeDocker) PullLatestArgsForCall(i int) string {
	fake.pullLatestMutex.RLock()
	defer fake.pullLatestMutex.RUnlock()
	argsForCall := fake.pullLatestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDocker) Push(arg1 string, arg2 string) {
	fake.pushMutex.Lock()
	fake.pushArgsForCall = append(fake.pushArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.PushStub
	fake.recordInvocation("Push", []interface{}{arg1, arg2})
	fake.pushMutex.Unlock()
	if stub != nil {
		fake.PushStub(arg1, arg2)
	}
}

func (fake *FakeDocker) PushCallCount() int {
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	return len(fake.pushArgsForCall)
}

func (fake *FakeDocker) PushCalls(stub func(string, string)) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = stub
}

func (fake *FakeDocker) PushArgsForCall(i int) (string, string) {
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	argsForCall := fake.pushArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDocker) RunImage(arg1 string, arg2 map[string]string, arg3 map[string]string) error {
	fake.runImageMutex.Lock()
	ret, specificReturn := fake.runImageReturnsOnCall[len(fake.runImageArgsForCall)]
	fake.runImageArgsForCall = append(fake.runImageArgsForCall, struct {
		arg1 string
		arg2 map[string]string
		arg3 map[string]string
	}{arg1, arg2, arg3})
	stub := fake.RunImageStub
	fakeReturns := fake.runImageReturns
	fake.recordInvocation("RunImage", []interface{}{arg1, arg2, arg3})
	fake.runImageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDocker) RunImageCallCount() int {
	fake.runImageMutex.RLock()
	defer fake.runImageMutex.RUnlock()
	return len(fake.runImageArgsForCall)
}

func (fake *FakeDocker) RunImageCalls(stub func(string, map[string]string, map[string]string) error) {
	fake.runImageMutex.Lock()
	defer fake.runImageMutex.Unlock()
	fake.RunImageStub = stub
}

func (fake *FakeDocker) RunImageArgsForCall(i int) (string, map[string]string, map[string]string) {
	fake.runImageMutex.RLock()
	defer fake.runImageMutex.RUnlock()
	argsForCall := fake.runImageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDocker) RunImageReturns(result1 error) {
	fake.runImageMutex.Lock()
	defer fake.runImageMutex.Unlock()
	fake.RunImageStub = nil
	fake.runImageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDocker) RunImageReturnsOnCall(i int, result1 error) {
	fake.runImageMutex.Lock()
	defer fake.runImageMutex.Unlock()
	fake.RunImageStub = nil
	if fake.runImageReturnsOnCall == nil {
		fake.runImageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runImageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDocker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	fake.isImageAvailableMutex.RLock()
	defer fake.isImageAvailableMutex.RUnlock()
	fake.printDockerBuildMutex.RLock()
	defer fake.printDockerBuildMutex.RUnlock()
	fake.pullLatestMutex.RLock()
	defer fake.pullLatestMutex.RUnlock()
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	fake.runImageMutex.RLock()
	defer fake.runImageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDocker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ lib.Docker = new(FakeDocker)
