// Code generated by counterfeiter. DO NOT EDIT.
package libfakes

import (
	"sync"

	"github.com/rdrdog/bldr/pkg/lib"
)

type FakeGit struct {
	LoadRepoInformationStub        func() *lib.GitState
	loadRepoInformationMutex       sync.RWMutex
	loadRepoInformationArgsForCall []struct {
	}
	loadRepoInformationReturns struct {
		result1 *lib.GitState
	}
	loadRepoInformationReturnsOnCall map[int]struct {
		result1 *lib.GitState
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGit) LoadRepoInformation() *lib.GitState {
	fake.loadRepoInformationMutex.Lock()
	ret, specificReturn := fake.loadRepoInformationReturnsOnCall[len(fake.loadRepoInformationArgsForCall)]
	fake.loadRepoInformationArgsForCall = append(fake.loadRepoInformationArgsForCall, struct {
	}{})
	stub := fake.LoadRepoInformationStub
	fakeReturns := fake.loadRepoInformationReturns
	fake.recordInvocation("LoadRepoInformation", []interface{}{})
	fake.loadRepoInformationMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGit) LoadRepoInformationCallCount() int {
	fake.loadRepoInformationMutex.RLock()
	defer fake.loadRepoInformationMutex.RUnlock()
	return len(fake.loadRepoInformationArgsForCall)
}

func (fake *FakeGit) LoadRepoInformationCalls(stub func() *lib.GitState) {
	fake.loadRepoInformationMutex.Lock()
	defer fake.loadRepoInformationMutex.Unlock()
	fake.LoadRepoInformationStub = stub
}

func (fake *FakeGit) LoadRepoInformationReturns(result1 *lib.GitState) {
	fake.loadRepoInformationMutex.Lock()
	defer fake.loadRepoInformationMutex.Unlock()
	fake.LoadRepoInformationStub = nil
	fake.loadRepoInformationReturns = struct {
		result1 *lib.GitState
	}{result1}
}

func (fake *FakeGit) LoadRepoInformationReturnsOnCall(i int, result1 *lib.GitState) {
	fake.loadRepoInformationMutex.Lock()
	defer fake.loadRepoInformationMutex.Unlock()
	fake.LoadRepoInformationStub = nil
	if fake.loadRepoInformationReturnsOnCall == nil {
		fake.loadRepoInformationReturnsOnCall = make(map[int]struct {
			result1 *lib.GitState
		})
	}
	fake.loadRepoInformationReturnsOnCall[i] = struct {
		result1 *lib.GitState
	}{result1}
}

func (fake *FakeGit) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loadRepoInformationMutex.RLock()
	defer fake.loadRepoInformationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGit) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ lib.Git = new(FakeGit)
