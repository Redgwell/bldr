// Code generated by counterfeiter. DO NOT EDIT.
package contextsfakes

import (
	"sync"

	"github.com/rdrdog/bldr/pkg/contexts"
)

type FakeContextProvider struct {
	GetBuildContextStub        func() *contexts.BuildContext
	getBuildContextMutex       sync.RWMutex
	getBuildContextArgsForCall []struct {
	}
	getBuildContextReturns struct {
		result1 *contexts.BuildContext
	}
	getBuildContextReturnsOnCall map[int]struct {
		result1 *contexts.BuildContext
	}
	GetDeployContextStub        func() *contexts.DeployContext
	getDeployContextMutex       sync.RWMutex
	getDeployContextArgsForCall []struct {
	}
	getDeployContextReturns struct {
		result1 *contexts.DeployContext
	}
	getDeployContextReturnsOnCall map[int]struct {
		result1 *contexts.DeployContext
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContextProvider) GetBuildContext() *contexts.BuildContext {
	fake.getBuildContextMutex.Lock()
	ret, specificReturn := fake.getBuildContextReturnsOnCall[len(fake.getBuildContextArgsForCall)]
	fake.getBuildContextArgsForCall = append(fake.getBuildContextArgsForCall, struct {
	}{})
	stub := fake.GetBuildContextStub
	fakeReturns := fake.getBuildContextReturns
	fake.recordInvocation("GetBuildContext", []interface{}{})
	fake.getBuildContextMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeContextProvider) GetBuildContextCallCount() int {
	fake.getBuildContextMutex.RLock()
	defer fake.getBuildContextMutex.RUnlock()
	return len(fake.getBuildContextArgsForCall)
}

func (fake *FakeContextProvider) GetBuildContextCalls(stub func() *contexts.BuildContext) {
	fake.getBuildContextMutex.Lock()
	defer fake.getBuildContextMutex.Unlock()
	fake.GetBuildContextStub = stub
}

func (fake *FakeContextProvider) GetBuildContextReturns(result1 *contexts.BuildContext) {
	fake.getBuildContextMutex.Lock()
	defer fake.getBuildContextMutex.Unlock()
	fake.GetBuildContextStub = nil
	fake.getBuildContextReturns = struct {
		result1 *contexts.BuildContext
	}{result1}
}

func (fake *FakeContextProvider) GetBuildContextReturnsOnCall(i int, result1 *contexts.BuildContext) {
	fake.getBuildContextMutex.Lock()
	defer fake.getBuildContextMutex.Unlock()
	fake.GetBuildContextStub = nil
	if fake.getBuildContextReturnsOnCall == nil {
		fake.getBuildContextReturnsOnCall = make(map[int]struct {
			result1 *contexts.BuildContext
		})
	}
	fake.getBuildContextReturnsOnCall[i] = struct {
		result1 *contexts.BuildContext
	}{result1}
}

func (fake *FakeContextProvider) GetDeployContext() *contexts.DeployContext {
	fake.getDeployContextMutex.Lock()
	ret, specificReturn := fake.getDeployContextReturnsOnCall[len(fake.getDeployContextArgsForCall)]
	fake.getDeployContextArgsForCall = append(fake.getDeployContextArgsForCall, struct {
	}{})
	stub := fake.GetDeployContextStub
	fakeReturns := fake.getDeployContextReturns
	fake.recordInvocation("GetDeployContext", []interface{}{})
	fake.getDeployContextMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeContextProvider) GetDeployContextCallCount() int {
	fake.getDeployContextMutex.RLock()
	defer fake.getDeployContextMutex.RUnlock()
	return len(fake.getDeployContextArgsForCall)
}

func (fake *FakeContextProvider) GetDeployContextCalls(stub func() *contexts.DeployContext) {
	fake.getDeployContextMutex.Lock()
	defer fake.getDeployContextMutex.Unlock()
	fake.GetDeployContextStub = stub
}

func (fake *FakeContextProvider) GetDeployContextReturns(result1 *contexts.DeployContext) {
	fake.getDeployContextMutex.Lock()
	defer fake.getDeployContextMutex.Unlock()
	fake.GetDeployContextStub = nil
	fake.getDeployContextReturns = struct {
		result1 *contexts.DeployContext
	}{result1}
}

func (fake *FakeContextProvider) GetDeployContextReturnsOnCall(i int, result1 *contexts.DeployContext) {
	fake.getDeployContextMutex.Lock()
	defer fake.getDeployContextMutex.Unlock()
	fake.GetDeployContextStub = nil
	if fake.getDeployContextReturnsOnCall == nil {
		fake.getDeployContextReturnsOnCall = make(map[int]struct {
			result1 *contexts.DeployContext
		})
	}
	fake.getDeployContextReturnsOnCall[i] = struct {
		result1 *contexts.DeployContext
	}{result1}
}

func (fake *FakeContextProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBuildContextMutex.RLock()
	defer fake.getBuildContextMutex.RUnlock()
	fake.getDeployContextMutex.RLock()
	defer fake.getDeployContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeContextProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ contexts.ContextProvider = new(FakeContextProvider)
