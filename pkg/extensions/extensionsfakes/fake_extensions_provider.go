// Code generated by counterfeiter. DO NOT EDIT.
package extensionsfakes

import (
	"sync"

	"github.com/rdrdog/bldr/pkg/extensions"
)

type FakeExtensionsProvider struct {
	GetSecretLoaderStub        func() extensions.SecretLoader
	getSecretLoaderMutex       sync.RWMutex
	getSecretLoaderArgsForCall []struct {
	}
	getSecretLoaderReturns struct {
		result1 extensions.SecretLoader
	}
	getSecretLoaderReturnsOnCall map[int]struct {
		result1 extensions.SecretLoader
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExtensionsProvider) GetSecretLoader() extensions.SecretLoader {
	fake.getSecretLoaderMutex.Lock()
	ret, specificReturn := fake.getSecretLoaderReturnsOnCall[len(fake.getSecretLoaderArgsForCall)]
	fake.getSecretLoaderArgsForCall = append(fake.getSecretLoaderArgsForCall, struct {
	}{})
	stub := fake.GetSecretLoaderStub
	fakeReturns := fake.getSecretLoaderReturns
	fake.recordInvocation("GetSecretLoader", []interface{}{})
	fake.getSecretLoaderMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeExtensionsProvider) GetSecretLoaderCallCount() int {
	fake.getSecretLoaderMutex.RLock()
	defer fake.getSecretLoaderMutex.RUnlock()
	return len(fake.getSecretLoaderArgsForCall)
}

func (fake *FakeExtensionsProvider) GetSecretLoaderCalls(stub func() extensions.SecretLoader) {
	fake.getSecretLoaderMutex.Lock()
	defer fake.getSecretLoaderMutex.Unlock()
	fake.GetSecretLoaderStub = stub
}

func (fake *FakeExtensionsProvider) GetSecretLoaderReturns(result1 extensions.SecretLoader) {
	fake.getSecretLoaderMutex.Lock()
	defer fake.getSecretLoaderMutex.Unlock()
	fake.GetSecretLoaderStub = nil
	fake.getSecretLoaderReturns = struct {
		result1 extensions.SecretLoader
	}{result1}
}

func (fake *FakeExtensionsProvider) GetSecretLoaderReturnsOnCall(i int, result1 extensions.SecretLoader) {
	fake.getSecretLoaderMutex.Lock()
	defer fake.getSecretLoaderMutex.Unlock()
	fake.GetSecretLoaderStub = nil
	if fake.getSecretLoaderReturnsOnCall == nil {
		fake.getSecretLoaderReturnsOnCall = make(map[int]struct {
			result1 extensions.SecretLoader
		})
	}
	fake.getSecretLoaderReturnsOnCall[i] = struct {
		result1 extensions.SecretLoader
	}{result1}
}

func (fake *FakeExtensionsProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSecretLoaderMutex.RLock()
	defer fake.getSecretLoaderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeExtensionsProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ extensions.ExtensionsProvider = new(FakeExtensionsProvider)
