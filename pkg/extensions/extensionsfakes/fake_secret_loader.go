// Code generated by counterfeiter. DO NOT EDIT.
package extensionsfakes

import (
	"sync"

	"github.com/rdrdog/bldr/pkg/config"
	"github.com/rdrdog/bldr/pkg/extensions"
	"github.com/sirupsen/logrus"
)

type FakeSecretLoader struct {
	LoadSecretsStub        func(string, []interface{}) ([]*extensions.SecretKeyValuePair, error)
	loadSecretsMutex       sync.RWMutex
	loadSecretsArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
	loadSecretsReturns struct {
		result1 []*extensions.SecretKeyValuePair
		result2 error
	}
	loadSecretsReturnsOnCall map[int]struct {
		result1 []*extensions.SecretKeyValuePair
		result2 error
	}
	SetConfigStub        func(*logrus.Logger, *config.Configuration, map[string]interface{}) error
	setConfigMutex       sync.RWMutex
	setConfigArgsForCall []struct {
		arg1 *logrus.Logger
		arg2 *config.Configuration
		arg3 map[string]interface{}
	}
	setConfigReturns struct {
		result1 error
	}
	setConfigReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecretLoader) LoadSecrets(arg1 string, arg2 []interface{}) ([]*extensions.SecretKeyValuePair, error) {
	var arg2Copy []interface{}
	if arg2 != nil {
		arg2Copy = make([]interface{}, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.loadSecretsMutex.Lock()
	ret, specificReturn := fake.loadSecretsReturnsOnCall[len(fake.loadSecretsArgsForCall)]
	fake.loadSecretsArgsForCall = append(fake.loadSecretsArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2Copy})
	stub := fake.LoadSecretsStub
	fakeReturns := fake.loadSecretsReturns
	fake.recordInvocation("LoadSecrets", []interface{}{arg1, arg2Copy})
	fake.loadSecretsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecretLoader) LoadSecretsCallCount() int {
	fake.loadSecretsMutex.RLock()
	defer fake.loadSecretsMutex.RUnlock()
	return len(fake.loadSecretsArgsForCall)
}

func (fake *FakeSecretLoader) LoadSecretsCalls(stub func(string, []interface{}) ([]*extensions.SecretKeyValuePair, error)) {
	fake.loadSecretsMutex.Lock()
	defer fake.loadSecretsMutex.Unlock()
	fake.LoadSecretsStub = stub
}

func (fake *FakeSecretLoader) LoadSecretsArgsForCall(i int) (string, []interface{}) {
	fake.loadSecretsMutex.RLock()
	defer fake.loadSecretsMutex.RUnlock()
	argsForCall := fake.loadSecretsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSecretLoader) LoadSecretsReturns(result1 []*extensions.SecretKeyValuePair, result2 error) {
	fake.loadSecretsMutex.Lock()
	defer fake.loadSecretsMutex.Unlock()
	fake.LoadSecretsStub = nil
	fake.loadSecretsReturns = struct {
		result1 []*extensions.SecretKeyValuePair
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretLoader) LoadSecretsReturnsOnCall(i int, result1 []*extensions.SecretKeyValuePair, result2 error) {
	fake.loadSecretsMutex.Lock()
	defer fake.loadSecretsMutex.Unlock()
	fake.LoadSecretsStub = nil
	if fake.loadSecretsReturnsOnCall == nil {
		fake.loadSecretsReturnsOnCall = make(map[int]struct {
			result1 []*extensions.SecretKeyValuePair
			result2 error
		})
	}
	fake.loadSecretsReturnsOnCall[i] = struct {
		result1 []*extensions.SecretKeyValuePair
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretLoader) SetConfig(arg1 *logrus.Logger, arg2 *config.Configuration, arg3 map[string]interface{}) error {
	fake.setConfigMutex.Lock()
	ret, specificReturn := fake.setConfigReturnsOnCall[len(fake.setConfigArgsForCall)]
	fake.setConfigArgsForCall = append(fake.setConfigArgsForCall, struct {
		arg1 *logrus.Logger
		arg2 *config.Configuration
		arg3 map[string]interface{}
	}{arg1, arg2, arg3})
	stub := fake.SetConfigStub
	fakeReturns := fake.setConfigReturns
	fake.recordInvocation("SetConfig", []interface{}{arg1, arg2, arg3})
	fake.setConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSecretLoader) SetConfigCallCount() int {
	fake.setConfigMutex.RLock()
	defer fake.setConfigMutex.RUnlock()
	return len(fake.setConfigArgsForCall)
}

func (fake *FakeSecretLoader) SetConfigCalls(stub func(*logrus.Logger, *config.Configuration, map[string]interface{}) error) {
	fake.setConfigMutex.Lock()
	defer fake.setConfigMutex.Unlock()
	fake.SetConfigStub = stub
}

func (fake *FakeSecretLoader) SetConfigArgsForCall(i int) (*logrus.Logger, *config.Configuration, map[string]interface{}) {
	fake.setConfigMutex.RLock()
	defer fake.setConfigMutex.RUnlock()
	argsForCall := fake.setConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSecretLoader) SetConfigReturns(result1 error) {
	fake.setConfigMutex.Lock()
	defer fake.setConfigMutex.Unlock()
	fake.SetConfigStub = nil
	fake.setConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecretLoader) SetConfigReturnsOnCall(i int, result1 error) {
	fake.setConfigMutex.Lock()
	defer fake.setConfigMutex.Unlock()
	fake.SetConfigStub = nil
	if fake.setConfigReturnsOnCall == nil {
		fake.setConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecretLoader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loadSecretsMutex.RLock()
	defer fake.loadSecretsMutex.RUnlock()
	fake.setConfigMutex.RLock()
	defer fake.setConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecretLoader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ extensions.SecretLoader = new(FakeSecretLoader)
