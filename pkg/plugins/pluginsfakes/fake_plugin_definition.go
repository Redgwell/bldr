// Code generated by counterfeiter. DO NOT EDIT.
package pluginsfakes

import (
	"sync"

	"github.com/rdrdog/bldr/pkg/config"
	"github.com/rdrdog/bldr/pkg/contexts"
	"github.com/rdrdog/bldr/pkg/extensions"
	"github.com/rdrdog/bldr/pkg/lib"
	"github.com/rdrdog/bldr/pkg/plugins"
	"github.com/sirupsen/logrus"
)

type FakePluginDefinition struct {
	ExecuteStub        func(contexts.ContextProvider, extensions.ExtensionsProvider, lib.LibProvider) error
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		arg1 contexts.ContextProvider
		arg2 extensions.ExtensionsProvider
		arg3 lib.LibProvider
	}
	executeReturns struct {
		result1 error
	}
	executeReturnsOnCall map[int]struct {
		result1 error
	}
	SetConfigStub        func(*logrus.Logger, *config.Configuration, map[string]interface{}) error
	setConfigMutex       sync.RWMutex
	setConfigArgsForCall []struct {
		arg1 *logrus.Logger
		arg2 *config.Configuration
		arg3 map[string]interface{}
	}
	setConfigReturns struct {
		result1 error
	}
	setConfigReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePluginDefinition) Execute(arg1 contexts.ContextProvider, arg2 extensions.ExtensionsProvider, arg3 lib.LibProvider) error {
	fake.executeMutex.Lock()
	ret, specificReturn := fake.executeReturnsOnCall[len(fake.executeArgsForCall)]
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		arg1 contexts.ContextProvider
		arg2 extensions.ExtensionsProvider
		arg3 lib.LibProvider
	}{arg1, arg2, arg3})
	stub := fake.ExecuteStub
	fakeReturns := fake.executeReturns
	fake.recordInvocation("Execute", []interface{}{arg1, arg2, arg3})
	fake.executeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePluginDefinition) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *FakePluginDefinition) ExecuteCalls(stub func(contexts.ContextProvider, extensions.ExtensionsProvider, lib.LibProvider) error) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = stub
}

func (fake *FakePluginDefinition) ExecuteArgsForCall(i int) (contexts.ContextProvider, extensions.ExtensionsProvider, lib.LibProvider) {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	argsForCall := fake.executeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePluginDefinition) ExecuteReturns(result1 error) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePluginDefinition) ExecuteReturnsOnCall(i int, result1 error) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = nil
	if fake.executeReturnsOnCall == nil {
		fake.executeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.executeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePluginDefinition) SetConfig(arg1 *logrus.Logger, arg2 *config.Configuration, arg3 map[string]interface{}) error {
	fake.setConfigMutex.Lock()
	ret, specificReturn := fake.setConfigReturnsOnCall[len(fake.setConfigArgsForCall)]
	fake.setConfigArgsForCall = append(fake.setConfigArgsForCall, struct {
		arg1 *logrus.Logger
		arg2 *config.Configuration
		arg3 map[string]interface{}
	}{arg1, arg2, arg3})
	stub := fake.SetConfigStub
	fakeReturns := fake.setConfigReturns
	fake.recordInvocation("SetConfig", []interface{}{arg1, arg2, arg3})
	fake.setConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePluginDefinition) SetConfigCallCount() int {
	fake.setConfigMutex.RLock()
	defer fake.setConfigMutex.RUnlock()
	return len(fake.setConfigArgsForCall)
}

func (fake *FakePluginDefinition) SetConfigCalls(stub func(*logrus.Logger, *config.Configuration, map[string]interface{}) error) {
	fake.setConfigMutex.Lock()
	defer fake.setConfigMutex.Unlock()
	fake.SetConfigStub = stub
}

func (fake *FakePluginDefinition) SetConfigArgsForCall(i int) (*logrus.Logger, *config.Configuration, map[string]interface{}) {
	fake.setConfigMutex.RLock()
	defer fake.setConfigMutex.RUnlock()
	argsForCall := fake.setConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePluginDefinition) SetConfigReturns(result1 error) {
	fake.setConfigMutex.Lock()
	defer fake.setConfigMutex.Unlock()
	fake.SetConfigStub = nil
	fake.setConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePluginDefinition) SetConfigReturnsOnCall(i int, result1 error) {
	fake.setConfigMutex.Lock()
	defer fake.setConfigMutex.Unlock()
	fake.SetConfigStub = nil
	if fake.setConfigReturnsOnCall == nil {
		fake.setConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePluginDefinition) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	fake.setConfigMutex.RLock()
	defer fake.setConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePluginDefinition) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugins.PluginDefinition = new(FakePluginDefinition)
